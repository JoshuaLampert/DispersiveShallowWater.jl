@doc raw"""
    SvärdKalischEquations1D(gravity, eta0 = 0.0, alpha = 0.0, beta = 0.2308939393939394, gamma = 0.04034343434343434)

Dispersive system by Svärd and Kalisch in one spatial dimension with spatially varying bathymetry. The equations are given in conservative variables by
```math
\begin{aligned}
  h_t + (hv)_x &= (\hat\alpha(\hat\alpha(h + b)_x)_x)_x,\\
  (hv)_t + (hv^2)_x + gh(h + b)_x &= (\hat\alpha v(\hat\alpha(h + b)_x)_x)_x + (\hat\beta v_x)_{xt} + \frac{1]{2}(\hat\gamma v_x)_{xx} + \frac{1}{2}(\hat\gamma v_{xx})_x
\end{aligned},
``
where ``\hat\alpha^2 = \alpha\sqrt(gd)d^2``, ``\hat\beta = \beta d^3``, ``\hat\gamma = \gamma\sqrt(gd)d^3``. The coefficients ``\alpha``, ``\beta`` and ``\gamma`` are provided in dimensionless form and ``d = \eta_0 - b`` is the still-water depth and `eta0` is the still-water surface (lake-at-rest).
The equations can be rewritten in primitive variables as
```math
\begin{aligned}
  \eta_t + ((\eta + D)v)_x = (\hat\alpha(\hat\alpha\eta_x)_x)_x,\\
  v_t(\eta + D) - v((\eta + D)v)_x + ((\eta + D)v^2)_x + g(\eta + D)\eta_x &= (\hat\alpha v(\hat\alpha\eta_x)_x)_x - v(\hat\alpha(\hat\alpha\eta_x)_x)_x + (\hat\beta v_x)_{xt} + \frac{1]{2}(\hat\gamma v_x)_{xx} + \frac{1}{2}(\hat\gamma v_{xx})_x
\end{aligned}.
```
The unknown quantities of the Svärd-Kalisch equations are the total water height ``\eta`` and the velocity ``v``.
The gravitational constant is denoted by `g` and the bottom topography (bathymetry) ``b = -D``. The water height above the bathymetry is therefore given by
``h = \eta + D``.

The equations by Svärd and Kalisch are presented and analyzed in
- Magnus Svärd, Henrik Kalisch (2023)
  A novel energy-bounded Boussinesq model and a well-balanced and stable numerical discretization
  [arXiv: 2302.09924](https://arxiv.org/abs/2302.09924)

"""
struct SvaerdKalischEquations1D{RealT <: Real} <: AbstractSvaerdKalischEquations{1, 3}
    gravity::RealT # gravitational constant
    eta0::RealT    # constant "lake-at-rest" total water height
    alpha::RealT   # coefficient
    beta::RealT    # coefficient
    gamma::RealT   # coefficient
end

const SvärdKalischEquations1D = SvaerdKalischEquations1D

function SvaerdKalischEquations1D(; gravity_constant, eta0 = 1.0, alpha = 0.0,
                                  beta = 0.2308939393939394, gamma = 0.04034343434343434)
    SvaerdKalischEquations1D(gravity_constant, eta0, alpha, beta, gamma)
end

varnames(::SvaerdKalischEquations1D) = ("eta", "v", "D")

# TODO: Initial condition should not get a `mesh`
"""
    initial_condition_dingemans(x, t, equations::SvaerdKalischEquations1D, mesh)

The initial condition that uses the dispersion relation of the Euler equations
to approximate waves generated by a wave maker as it is done by experiments of
Dingemans. The topography is a trapesoidal. It is assumed that `equations.eta0 = 0.8`.

References:
- Magnus Svärd, Henrik Kalisch (2023)
  A novel energy-bounded Boussinesq model and a well-balanced and stable numerical discretization
  [arXiv: 2302.09924](https://arxiv.org/abs/2302.09924)
- Maarten W. Dingemans (1994)
  Comparison of computations with Boussinesq-like models and laboratory measurements
  [link](https://repository.tudelft.nl/islandora/object/uuid:c2091d53-f455-48af-a84b-ac86680455e9/datastream/OBJ/download)
"""
function initial_condition_dingemans(x, t, equations::SvaerdKalischEquations1D, mesh)
    eta0 = 0.8
    A = 0.02
    # omega = 2*pi/(2.02*sqrt(2))
    K = 0.8406220896381442 # precomputed result of find_zero(K -> omega^2 - equations.gravity * K * tanh(K * eta0), 1.0) using Roots.jl
    if x < -30.5 * pi / K || x > -8.5 * pi / K
        h = 0.0
    else
        h = A * cos(K * x)
    end
    v = sqrt(equations.gravity / K * tanh(K) * eta0) * h / eta0
    if x < 11.01 || x >= 33.07
        b = 0.0
    elseif 11.01 <= x && x < 23.04
        b = 0.6 * (x - 11.01) / (23.04 - 11.01)
    elseif 23.04 <= x && x < 27.04
        b = 0.6
    elseif 27.04 <= x && x < 33.07
        b = 0.6 * (33.07 - x) / (33.07 - 27.04)
    else
        error("should not happen")
    end
    eta = h + eta0
    D = -b
    return SVector(eta, v, D)
end

function create_cache(mesh,
                      equations::SvaerdKalischEquations1D,
                      solver::Solver,
                      initial_condition,
                      RealT,
                      uEltype)
    #  Assume D is independent of time and compute D evaluated at mesh points once.
    D = Array{RealT}(undef, nnodes(mesh))
    x = grid(solver)
    for i in eachnode(solver)
        D[i] = initial_condition(x[i], 0.0, equations, mesh)[3]
    end
    d = equations.eta0 .+ D
    h = Array{RealT}(undef, nnodes(mesh))
    hv = similar(h)
    alpha_hat = sqrt.(equations.alpha * sqrt.(equations.gravity * d) .* d .^ 2)
    beta_hat = equations.beta * d .^ 3
    gamma_hat = equations.gamma * sqrt.(equations.gravity * d) .* d .^ 3
    tmp1 = similar(h)
    tmp2 = similar(h)
    hmD1betaD1 = Array{RealT}(undef, nnodes(mesh), nnodes(mesh))
    if solver.D1 isa PeriodicDerivativeOperator
        D1_central = solver.D1
        sparse_D1 = sparse(D1_central)
        D1betaD1 = sparse_D1 * Diagonal(beta_hat) * sparse_D1
    elseif solver.D1 isa PeriodicUpwindOperators
        D1_central = solver.D1.central
        D1betaD1 = sparse(solver.D1.plus) * Diagonal(beta_hat) * sparse(solver.D1.minus)
    else
        @error "unknown type of first-derivative operator"
    end
    return (hmD1betaD1 = hmD1betaD1, D1betaD1 = D1betaD1, d = d, h = h, hv = hv,
            alpha_hat = alpha_hat, beta_hat = beta_hat, gamma_hat = gamma_hat,
            tmp1 = tmp1, tmp2 = tmp2, D1_central = D1_central, D1 = solver.D1)
end

# Discretization that conserves the mass (for eta and v) and is energy-bounded for periodic boundary conditions
function rhs!(du_ode, u_ode, t, mesh, equations::SvaerdKalischEquations1D,
              initial_condition,
              ::BoundaryConditionPeriodic, solver, cache)
    @unpack hmD1betaD1, D1betaD1, d, h, hv, alpha_hat, beta_hat, gamma_hat, tmp1, tmp2, D1_central = cache
    q = wrap_array(u_ode, mesh, equations, solver)
    dq = wrap_array(du_ode, mesh, equations, solver)

    eta = view(q, 1, :)
    v = view(q, 2, :)
    D = view(q, 3, :)
    deta = view(dq, 1, :)
    dv = view(dq, 2, :)
    dD = view(dq, 3, :)
    fill!(dD, zero(eltype(dD)))

    @. h = eta + D
    hv = h .* v

    if solver.D1 isa PeriodicDerivativeOperator
        D1eta = D1_central * eta
        D1v = D1_central * v
        tmp1 = alpha_hat .* (D1_central * (alpha_hat .* D1eta))
        vD1y = v .* (D1_central * tmp1)
        D1vy = D1_central * (v .* tmp1)
        yD1v = tmp1 .* D1v
        @. tmp2 = tmp1 - hv
        mul!(deta, D1_central, tmp2)
    elseif solver.D1 isa PeriodicUpwindOperators
        D1eta = D1_central * eta
        D1v = D1_central * v
        tmp1 = alpha_hat .* (solver.D1.minus * (alpha_hat .* (solver.D1.plus * eta)))
        vD1y = v .* (solver.D1.minus * tmp1)
        D1vy = solver.D1.minus * (v .* tmp1)
        yD1v = tmp1 .* (solver.D1.plus * v)
        deta[:] = solver.D1.minus * tmp1 - D1_central * hv
    else
        @error "unknown type of first derivative operator"
    end

    hmD1betaD1 = Diagonal(h) - D1betaD1
    # split form
    tmp2 = -(0.5 * (D1_central * (hv .* v) + hv .* D1v - v .* (D1_central * hv)) +
             equations.gravity * h .* D1eta +
             0.5 * (vD1y - D1vy - yD1v) -
             0.5 * D1_central * (gamma_hat .* (solver.D2 * v)) -
             0.5 * solver.D2 * (gamma_hat .* D1v))
    dv[:] = hmD1betaD1 \ tmp2

    return nothing
end

@inline function waterheight_total(u, equations::SvaerdKalischEquations1D)
    return u[1]
end

@inline function velocity(u, equations::SvaerdKalischEquations1D)
    return u[2]
end

@inline function bathymetry(u, equations::SvaerdKalischEquations1D)
    return -u[3]
end

@inline function waterheight(u, equations::SvaerdKalischEquations1D)
    return waterheight_total(u, equations) - bathymetry(u, equations)
end

@inline function energy_total(u, equations::SvaerdKalischEquations1D)
    eta, v, D = u
    e = 0.5 * (equations.gravity * eta^2 + (D + eta) * v^2)
    return e
end

@inline entropy(u, equations::SvaerdKalischEquations1D) = energy_total(u, equations)

# The modified entropy/total energy takes the whole `u` for every point in space
"""
    energy_total_modified(u, equations::SvaerdKalischEquations1D, cache)

Return the modified total energy of the conserved variables `u` for the
`SvaerdKalischEquations1D`. It contains an additional term containing a
derivative compared to the usual `energy_total`. The `energy_total_modified`
is a conserved quantity of the Svärd-Kalisch equations.

`u` is a vector of the conserved variables at ALL nodes, i.e., a matrix
of the correct length `nvariables(equations)` as first dimension and the
number of nodes as length of the second dimension.
`cache` needs to hold the first-derivative SBP operator `D1`.
"""
@inline function energy_total_modified(u, equations::SvaerdKalischEquations1D, cache)
    e_modified = zeros(eltype(u), size(u, 2))
    # Need to compute new beta_hat, do not use the old one from the `cache`
    eta = view(u, 1, :)
    v = view(u, 2, :)
    D = view(u, 3, :)
    beta_hat = equations.beta * (eta .+ D) .^ 3
    if cache.D1 isa PeriodicDerivativeOperator
        tmp = 0.5 * beta_hat .* ((cache.D1 * v) .^ 2)
    elseif cache.D1 isa PeriodicUpwindOperators
        tmp = 0.5 * beta_hat .* ((cache.D1.minus * v) .^ 2)
    else
        @error "unknown type of first-derivative operator"
    end
    for i in 1:size(u, 2)
        e_modified[i] = energy_total(view(u, :, i), equations) + tmp[i]
    end
    return e_modified
end

"""
    entropy_modified(u, equations::SvaerdKalischEquations1D, cache)

Alias for [`energy_total_modified`](@ref).
"""
@inline function entropy_modified(u, equations::SvaerdKalischEquations1D, cache)
    energy_total_modified(u, equations, cache)
end

# Calculate the error for the "lake-at-rest" test case where eta should
# be a constant value over time
@inline function lake_at_rest_error(u, equations::SvaerdKalischEquations1D)
    eta, _, _ = u
    return abs(equations.eta0 - eta)
end
